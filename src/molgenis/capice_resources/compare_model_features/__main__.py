import pandas as pd

from molgenis.capice_resources.core import Module
from molgenis.capice_resources.core import GlobalEnums as Genums
from molgenis.capice_resources.compare_model_features.ranker import Ranker
from molgenis.capice_resources.compare_model_features.orderer import Orderer
from molgenis.capice_resources.compare_model_features.normalizer import Normalizer
from molgenis.capice_resources.compare_model_features import CompareModelFeaturesEnums as Menums


class CompareModelFeatures(Module):
    def __init__(self):
        super().__init__(
            program='Compare model features',
            description='Generates an output file that can be used to compare 2 CAPICE models with '
                        'each other. Requires the CAPICE explain tool to be used on the models to '
                        'compare. The output from CAPICE explain can then be used as input for '
                        'this script to generate a comparison tsv file.'
                        'Please note that it is the user responsibility to keep track of was '
                        'supplied as "explain_1" and "explain_2".'

        )

    @staticmethod
    def _create_module_specific_arguments(parser):
        required = parser.add_argument_group('Required arguments')
        optional = parser.add_argument_group('Optional arguments')

        required.add_argument(
            '-a',
            '--explain-1',
            type=str,
            required=True,
            help='Location of the file generated by the capice explain tool for the first model'
                 'supplied as a (gzipped) tsv file. Should contain the following columns:'
                 'feature, gain, total_gain, weight, cover & total_cover'
        )
        required.add_argument(
            '-b',
            '--explain-2',
            type=str,
            required=True,
            help='Location of the file generated by the capice explain tool for the second model'
                 'supplied as a (gzipped) tsv file. Should contain the following columns:'
                 'feature, gain, total_gain, weight, cover & total_cover'
        )

        required.add_argument(
            '-o',
            '--output',
            type=str,
            required=True,
            help='Path to generate the output file to. Will generate directories if they do not'
                 'exist yet. Must be a (gzipped) tsv file.'
        )

        optional.add_argument(
            '-f',
            '--force',
            action='store_true',
            help='Force overwrite the output file if it already exists.'
        )

        return parser

    def _validate_module_specific_arguments(self, parser):
        explain_1 = self.input_validator.validate_icli_file(
            parser.get_argument('explain_1'),
            Genums.TSV_EXTENSIONS.value
        )
        explain_2 = self.input_validator.validate_icli_file(
            parser.get_argument('explain_2'),
            Genums.TSV_EXTENSIONS.value
        )
        output = self.input_validator.validate_ocli_directory(
            parser.get_argument('output'),
            Genums.TSV_EXTENSIONS.value,
            parser.get_argument('force')
        )
        return {
            **explain_1,
            **explain_2,
            **output
        }

    def run_module(self, arguments) -> dict[str, object]:
        explain_1 = self._read_pandas_tsv(arguments['explain_1'], Menums.list())
        self._process_explain(explain_1)
        explain_2 = self._read_pandas_tsv(arguments['explain_2'], Menums.list())
        self._process_explain(explain_2)
        merge = self._merge_explains(explain_1, explain_2)
        orderer = Orderer()
        out = orderer.order(merge)
        return {'dataframe': out, Genums.OUTPUT.value: arguments['output']}

    def _process_explain(self, explain: pd.DataFrame) -> None:
        """
        Function for both explain files to run the normalizer and ranker.

        Args:
            explain:
                The pandas DataFrame of the loaded in CAPICE explain file.
                Please note that this is performed inplace.

        """
        normalizer = Normalizer()
        normalizer.normalize_column(explain, Menums.GAIN.value)
        ranker = Ranker()
        ranker.add_rank(explain, Menums.GAIN.value + Menums.NORMALIZED.value)

    @staticmethod
    def _merge_explains(explain1: pd.DataFrame, explain2: pd.DataFrame) -> pd.DataFrame:
        """
        Function to merge both explain files. Can be expanded if we want to support more explains.

        Args:
            explain1:
                The normalized and ranked explain dataframe of model 1.
            explain2:
                The normalized and ranked explain dataframe of model 2.

        """
        return pd.merge(
            explain1,
            explain2,
            how='outer',
            on=Menums.FEATURE.value,
            suffixes=('_model1', '_model2')
        )

    def export(self, output):
        self.exporter.export_pandas_file(output[Genums.OUTPUT.value], output['dataframe'])


def main():
    CompareModelFeatures().run()


if __name__ == '__main__':
    main()
